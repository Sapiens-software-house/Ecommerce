@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    @*<lu class="list-unstyled">
        @foreach (var item in ProductService.Products.Products)
        {
            <li>
                @foreach (var itemImg in @item.Images)
                {
                    <div>
                        <a href="#">
                            <img class="img-fluid rounded mx-auto d-block" src="@itemImg" alt="@item.Slug" />
                        </a>
                    </div>
                }
                <div>
                    <a href="#">
                        <h4 class="mb-0">@item.Slug</h4>
                    </a>
                    <p>@item.Slug </p>
                    <h5 class="price">$@item.Quantity </h5>
                </div>
            </li>
        }
    </lu>*@

    @*<MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
        <MudCarouselItem Transition="transition" Color="@Color.Primary">
            <div class="d-flex" style="height:100%">
                <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="transition" Color="@Color.Primary">
            <div class="d-flex" style="height:100%">
                <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
            </div>
        </MudCarouselItem>
    </MudCarousel>
    <MudSelect @bind-Value="transition" Label="Transition" Class="ma-2">
        <MudSelectItem Value="@Transition.Fade">Fade</MudSelectItem>
        <MudSelectItem Value="@Transition.Slide">Slide</MudSelectItem>
        <MudSelectItem Value="@Transition.None">None</MudSelectItem>
    </MudSelect>
    <MudSwitch @bind-Checked="@arrows" Color="Color.Primary">Show Arrows</MudSwitch>
    <MudSwitch @bind-Checked="@bullets" Color="Color.Primary">Show Bullets</MudSwitch>
    <MudSwitch @bind-Checked="@enableSwipeGesture" Color="Color.Primary">Enable Swap Gesture</MudSwitch>
    <MudSwitch @bind-Checked="@autocycle" Color="Color.Primary">Auto Cycle (Default: 5 secs)</MudSwitch>
    *@

    @foreach (var item in ProductService.Products.Products)
    {
        <MudCard Class="responsive img-fluid" Style="height:2%; width:25%; display: inline-flex;">
            <MudCardContent Class="responsive">
                <div>
                    <img class="responsive" src="@item.Images[0]" alt="teste">
                </div>
                <MudText Typo="Typo.body1">@item.Name</MudText>
            </MudCardContent>
            <MudCardActions Class="responsive" Style="display: inline-block;">
                <MudButton Variant="Variant.Text" Color="Color.Primary">Details</MudButton>
            </MudCardActions>
        </MudCard>
    }

    @*<MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">I</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">Istra Croatia</MudText>
                <MudText Typo="Typo.body2">Peninsula in Europe</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
            <MudCarouselItem Transition="transition" Color="@Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudCardMedia Image="images/door.jpg" Height="200" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Color="@Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                </div>
            </MudCarouselItem>
        </MudCarousel>        
        <MudCardContent>
            <MudText Typo="Typo.h5">Old Paint</MudText>
            <MudText Typo="Typo.body2">Old paint found on a stone house door.</MudText>
            <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Share</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Details</MudButton>
        </MudCardActions>
    </MudCard>*@

}

@code {

    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    protected override void OnInitialized()
    {
        ProductService.GetProducts();
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    //private static List<Product> Products = new List<Product>
    //{
    //    new Product
    //    {
    //        id  =  "" // Id of product
    //        ,
    //        name = "" // Name of product
    //        ,
    //        type = "" // Type of product, currently it is always key
    //        ,
    //        slug = ""  // Slug of product
    //        ,
    //        qty = ""// Qty of product available to buy
    //        ,
    //        minQty = 1// Minimum product quantity available to buy
    //        ,
    //        retail_min_price = 1 // minimal product price for retail users in EUR with fees.
    //        ,
    //        retailMinBasePrice = 1 // minimal product price for retail users in EUR without fees. Price set by seller while adding offer.
    //        ,
    //        thumbnail = ""// Url to image
    //        ,
    //        smallImage = "" // Url to thumbnail image
    //        ,
    //        coverImage = "" // Url to cover image
    //        ,images = new List<Image>
    //        {
    //            new Image
    //            {
    //                url = "https://images.g2a.com/1024x768/1x1x0/marvels-spider-man-remastered-pc-steam-key-global-i10000302546004/799cf76f63324301a0b19a4a"
    //            }
    //        }// Url list to all images in full resolution
    //        ,
    //        updated_at = "" // 	date of last update
    //        ,
    //        release_date = "" // Product release date
    //        ,
    //        region = ""// Region of product eg. GLOBAL, EUROPE, AMERICA, NORTH AMERICA, RU/CIS, SOUTH EASTERN ASIA, WESTERN ASIA, GERMANY, INDIA, POLAND, UNITED KINGDOM etc.
    //        ,
    //        developer = ""// Developer name of product
    //        ,
    //        publisher = "" // Publisher name of product
    //        ,
    //        platform = "" // Platform eg. Steam, Origin, Uplay, GOG, Xbox, Apple, Gameforge, Oculus Rift, HTC Vive, PSN, Blizzard
    //        ,priceLimit = new PriceLimit
    //        {
    //            mim = 1
    //            ,
    //            max = 1
    //        }  // Price value possible to set while adding/updating offer. Higher than max or lower than min are not possible to use.
    //       ,restrictions = new Restriction
    //       {
    //            pegi_discrimination = false
    //            ,
    //            pegi_drugs = false
    //            ,
    //            pegi_fear = false
    //            ,
    //            pegi_gambling = false
    //            ,
    //            pegi_online = false
    //            ,
    //            pegi_sex = false
    //            ,
    //            pegi_profanity = false
    //            ,
    //            pegi_violence = false
    //       }  // PEGI restrictions
    //       ,requirements = new Requirement
    //       {
    //            Minimal = 
    //                new Minimal
    //                {
    //                    reqdiskspace = ""
    //                    ,
    //                    reqgraphics = ""
    //                    ,
    //                    reqmemory = ""
    //                    ,
    //                    reqother = ""
    //                    ,
    //                    reqprocessor = ""
    //                    ,
    //                    reqsystem = ""
    //                }

    //            , Recommended = 
    //                new Recommended
    //                {
    //                    reqdiskspace = ""
    //                    ,
    //                    reqgraphics = ""
    //                    ,
    //                    reqmemory = ""
    //                    ,
    //                    reqother = ""
    //                    ,
    //                    reqprocessor = ""
    //                    ,
    //                    reqsystem = ""
    //                }
                
    //       }// Requirements
    //       ,videos = new List<Video>
    //       {
    //           new Video
    //           {
    //                type = ""
    //                , url = ""
    //           }
    //           ,
    //       } // Videos
    //       ,categories = new List<Categories>
    //       {
    //            new Categories
    //           {
    //                Id = 0
    //                , name = ""
    //           }
    //       }  // Categories
    //    }
    //};
}
